// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/logx"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pixivIllustFieldNames          = builder.RawFieldNames(&PixivIllust{})
	pixivIllustRows                = strings.Join(pixivIllustFieldNames, ",")
	pixivIllustRowsExpectAutoSet   = strings.Join(stringx.Remove(pixivIllustFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pixivIllustRowsWithPlaceHolder = strings.Join(stringx.Remove(pixivIllustFieldNames, "`illust_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	pixivIllustModel interface {
		Insert(ctx context.Context, data *PixivIllust) (sql.Result, error)
		FindOne(ctx context.Context, illustId int64) (*PixivIllust, error)
		Update(ctx context.Context, data *PixivIllust) error
		Delete(ctx context.Context, illustId int64) error
		FindOneByIllustId(ctx context.Context, illustId int64) (PixivIllustData, error)
	}

	defaultPixivIllustModel struct {
		conn  sqlx.SqlConn
		table string
	}

	// 用于对外提供作品的部分详情
	PixivIllustData struct {
		IllustID      int64          `db:"illust_id"`      // 作品ID
		Title   sql.NullString `db:"illust_title"`   // 作品标题
		ThumbURL    sql.NullString `db:"thumb_url"`    // 普通图URL
		UserName      sql.NullString `db:"user_name"`      // 用户名称
		ProfileImg string `db:"profile_img"` // 用户头像的URL
		Rank int `db:"rank"` 	// 预测排名
	}

	PixivIllust struct {
		IllustId      int64          `db:"illust_id"`      // 作品ID
		IllustTitle   sql.NullString `db:"illust_title"`   // 作品标题
		IllustComment sql.NullString `db:"illust_comment"` // 作品评论
		Description   sql.NullString `db:"description"`    // 作品描述
		IllustType    sql.NullInt64  `db:"illust_type"`    // 作品类型
		CreateDate    sql.NullTime   `db:"create_date"`    // 作品创建日期
		UploadDate    sql.NullTime   `db:"upload_date"`    // 作品上传日期
		Restrict      sql.NullInt64  `db:"restrict"`       // 作品限制
		XRestrict     sql.NullInt64  `db:"x_restrict"`     // 作品X限制
		Sl            sql.NullInt64  `db:"sl"`             // 作品SL
		MiniUrl       sql.NullString `db:"mini_url"`       // 缩略图URL
		ThumbUrl      sql.NullString `db:"thumb_url"`      // 缩略图URL
		SmallUrl      sql.NullString `db:"small_url"`      // 小图URL
		RegularUrl    sql.NullString `db:"regular_url"`    // 普通图URL
		OriginalUrl   sql.NullString `db:"original_url"`   // 原图URL
		Alt           sql.NullString `db:"alt"`            // 作品ALT
		UserId        sql.NullInt64  `db:"user_id"`        // 用户ID
		UserName      sql.NullString `db:"user_name"`      // 用户名称
		UserAccount   sql.NullString `db:"user_account"`   // 用户账号
		Width         sql.NullInt64  `db:"width"`          // 作品宽度
		Height        sql.NullInt64  `db:"height"`         // 作品高度
		PageCount     sql.NullInt64  `db:"page_count"`     // 作品页数
		BookmarkCount sql.NullInt64  `db:"bookmark_count"` // 作品收藏数
		LikeCount     sql.NullInt64  `db:"like_count"`     // 作品点赞数
		CommentCount  sql.NullInt64  `db:"comment_count"`  // 作品评论数
		ResponseCount sql.NullInt64  `db:"response_count"` // 作品回复数
		ViewCount     sql.NullInt64  `db:"view_count"`     // 作品浏览数
		BookStyle     sql.NullString `db:"book_style"`     // 作品书籍风格
		IsHowto       sql.NullInt64  `db:"is_howto"`       // 是否为教程
		IsOriginal    sql.NullInt64  `db:"is_original"`    // 是否为原创
		LastUpdate    sql.NullTime   `db:"last_update"`    // 最后更新时间
	}
)

func newPixivIllustModel(conn sqlx.SqlConn) *defaultPixivIllustModel {
	return &defaultPixivIllustModel{
		conn:  conn,
		table: "`pixiv_illust`",
	}
}

// 根据illustID返回图像预测中所找到的illust部分信息
func (m *defaultPixivIllustModel) FindOneByIllustId(ctx context.Context, illustId int64) (PixivIllustData, error){

	// 直接构建SQL查询语句用于跨表查询``
	query := fmt.Sprintf(`
		SELECT pi.illust_id as illust_id, pi.illust_title as illust_title, pi.thumb_url as thumb_url, pi.user_name as user_name,
		COALESCE(pa.image, 'https://s.pximg.net/common/images/no_profile_s.png') AS profile_img, 
		0 AS rank 
		FROM ACG.pixiv_illust pi 
		LEFT JOIN 
		ACG.pixiv_author pa ON 
		pi.user_id = pa.user_id WHERE pi.illust_id = ? 
		limit 1`)
	logx.Debugf("SQL query: %v",query)

	var resp PixivIllustData
	err := m.conn.QueryRowCtx(ctx,&resp,query,illustId)
	switch err {
	case nil:
		return resp,nil
	case sqlc.ErrNotFound:
		return resp,ErrNotFound
	default:
		return resp,err
	}
}

func (m *defaultPixivIllustModel) withSession(session sqlx.Session) *defaultPixivIllustModel {
	return &defaultPixivIllustModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`pixiv_illust`",
	}
}

func (m *defaultPixivIllustModel) Delete(ctx context.Context, illustId int64) error {
	query := fmt.Sprintf("delete from %s where `illust_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, illustId)
	return err
}

func (m *defaultPixivIllustModel) FindOne(ctx context.Context, illustId int64) (*PixivIllust, error) {
	query := fmt.Sprintf("select %s from %s where `illust_id` = ? limit 1", pixivIllustRows, m.table)
	var resp PixivIllust
	err := m.conn.QueryRowCtx(ctx, &resp, query, illustId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPixivIllustModel) Insert(ctx context.Context, data *PixivIllust) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pixivIllustRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.IllustId, data.IllustTitle, data.IllustComment, data.Description, data.IllustType, data.CreateDate, data.UploadDate, data.Restrict, data.XRestrict, data.Sl, data.MiniUrl, data.ThumbUrl, data.SmallUrl, data.RegularUrl, data.OriginalUrl, data.Alt, data.UserId, data.UserName, data.UserAccount, data.Width, data.Height, data.PageCount, data.BookmarkCount, data.LikeCount, data.CommentCount, data.ResponseCount, data.ViewCount, data.BookStyle, data.IsHowto, data.IsOriginal, data.LastUpdate)
	return ret, err
}

func (m *defaultPixivIllustModel) Update(ctx context.Context, data *PixivIllust) error {
	query := fmt.Sprintf("update %s set %s where `illust_id` = ?", m.table, pixivIllustRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.IllustTitle, data.IllustComment, data.Description, data.IllustType, data.CreateDate, data.UploadDate, data.Restrict, data.XRestrict, data.Sl, data.MiniUrl, data.ThumbUrl, data.SmallUrl, data.RegularUrl, data.OriginalUrl, data.Alt, data.UserId, data.UserName, data.UserAccount, data.Width, data.Height, data.PageCount, data.BookmarkCount, data.LikeCount, data.CommentCount, data.ResponseCount, data.ViewCount, data.BookStyle, data.IsHowto, data.IsOriginal, data.LastUpdate, data.IllustId)
	return err
}

func (m *defaultPixivIllustModel) tableName() string {
	return m.table
}
