// image_prediction.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: image_predction_service.proto

package image_prediction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImagePrediction_Predict_FullMethodName = "/image_prediction.ImagePrediction/Predict"
)

// ImagePredictionClient is the client API for ImagePrediction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImagePredictionClient interface {
	// Change the return type to stream ImageVectorResponse
	Predict(ctx context.Context, opts ...grpc.CallOption) (ImagePrediction_PredictClient, error)
}

type imagePredictionClient struct {
	cc grpc.ClientConnInterface
}

func NewImagePredictionClient(cc grpc.ClientConnInterface) ImagePredictionClient {
	return &imagePredictionClient{cc}
}

func (c *imagePredictionClient) Predict(ctx context.Context, opts ...grpc.CallOption) (ImagePrediction_PredictClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImagePrediction_ServiceDesc.Streams[0], ImagePrediction_Predict_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &imagePredictionPredictClient{stream}
	return x, nil
}

type ImagePrediction_PredictClient interface {
	Send(*ImagePredictionRequest) error
	Recv() (*ImageVectorResponse, error)
	grpc.ClientStream
}

type imagePredictionPredictClient struct {
	grpc.ClientStream
}

func (x *imagePredictionPredictClient) Send(m *ImagePredictionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imagePredictionPredictClient) Recv() (*ImageVectorResponse, error) {
	m := new(ImageVectorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImagePredictionServer is the server API for ImagePrediction service.
// All implementations must embed UnimplementedImagePredictionServer
// for forward compatibility
type ImagePredictionServer interface {
	// Change the return type to stream ImageVectorResponse
	Predict(ImagePrediction_PredictServer) error
	mustEmbedUnimplementedImagePredictionServer()
}

// UnimplementedImagePredictionServer must be embedded to have forward compatible implementations.
type UnimplementedImagePredictionServer struct {
}

func (UnimplementedImagePredictionServer) Predict(ImagePrediction_PredictServer) error {
	return status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedImagePredictionServer) mustEmbedUnimplementedImagePredictionServer() {}

// UnsafeImagePredictionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImagePredictionServer will
// result in compilation errors.
type UnsafeImagePredictionServer interface {
	mustEmbedUnimplementedImagePredictionServer()
}

func RegisterImagePredictionServer(s grpc.ServiceRegistrar, srv ImagePredictionServer) {
	s.RegisterService(&ImagePrediction_ServiceDesc, srv)
}

func _ImagePrediction_Predict_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImagePredictionServer).Predict(&imagePredictionPredictServer{stream})
}

type ImagePrediction_PredictServer interface {
	Send(*ImageVectorResponse) error
	Recv() (*ImagePredictionRequest, error)
	grpc.ServerStream
}

type imagePredictionPredictServer struct {
	grpc.ServerStream
}

func (x *imagePredictionPredictServer) Send(m *ImageVectorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imagePredictionPredictServer) Recv() (*ImagePredictionRequest, error) {
	m := new(ImagePredictionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImagePrediction_ServiceDesc is the grpc.ServiceDesc for ImagePrediction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImagePrediction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image_prediction.ImagePrediction",
	HandlerType: (*ImagePredictionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Predict",
			Handler:       _ImagePrediction_Predict_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "image_predction_service.proto",
}
